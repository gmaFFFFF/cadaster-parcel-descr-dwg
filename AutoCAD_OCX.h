// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 5081 $
// File generated on 10.08.2008 16:06:45 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Common Files\Autodesk Shared\acax17enu.tlb (1)
// LIBID: {851A4561-F4EC-4631-9B0C-E7DC407512C9}
// LCID: 0
// Helpfile: C:\Program Files\Common Files\Autodesk Shared\ACADAUTO.CHM
// HelpString: AutoCAD 2009 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   AutoCAD_OCXH
#define   AutoCAD_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "AutoCAD_TLB.h"
namespace Autocad_tlb
{

// *********************************************************************//
// HelpString: AutoCAD 2009 Type Library
// Version:    1.0
// *********************************************************************//

// SKIPPING COCLASS: AcadHyperlink        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDynamicBlockReferenceProperty - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadObject           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadXRecord          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimStyle         - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLayer            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLineType         - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMaterial         - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadRegisteredApplication - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadTextStyle        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadUCS              - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadView             - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadViewport         - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadGroup            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPlotConfiguration - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLayout           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadIdPair           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSectionSettings  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSectionTypeSettings - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadHyperlinks       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDictionary       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLayers           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimStyles        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDictionaries     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLineTypes        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMaterials        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadTextStyles       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadUCSs             - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadRegisteredApplications - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadViews            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadViewports        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadGroups           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadBlocks           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLayouts          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPlotConfigurations - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadEntity           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadRasterImage      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: Acad3DFace           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: Acad3DPolyline       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadRegion           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: Acad3DSolid          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadArc              - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadAttribute        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadAttributeReference - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadBlockReference   - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadCircle           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadEllipse          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadHatch            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLeader           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMLeader          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLWPolyline       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLine             - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMText            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPoint            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPolyline         - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPolygonMesh      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadRay              - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadShape            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSolid            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSpline           - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadText             - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadTolerance        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadTrace            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadXline            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPViewport        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMInsertBlock     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPolyfaceMesh     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMLine            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadExternalReference - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadTable            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadOle              - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadHelix            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSurface          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPlaneSurface     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadExtrudedSurface  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadRevolvedSurface  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSweptSurface     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadLoftedSurface    - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSection          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSectionManager   - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDwfUnderlay      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDgnUnderlay      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSubEntity        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSubEntSolidFace  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSubEntSolidEdge  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSubEntSolidVertex - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSubEntSolidNode  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadWipeout          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimension        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimAligned       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimAngular       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimDiametric     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimOrdinate      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimRadial        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimRotated       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDim3PointAngular - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimArcLength     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDimRadialLarge   - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadBlock            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadModelSpace       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPaperSpace       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadFileDependency   - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadFileDependencies - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSummaryInfo      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDatabasePreferences - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadState            - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadApplication      - Has 'PredeclId' flag
// SKIPPING COCLASS: AcadApplicationMinorVersion1 - Has 'Hidden' flag
// SKIPPING COCLASS: AcadApplicationMinorVersion2 - Has 'Hidden' flag
// SKIPPING COCLASS: AcadSelectionSet     - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadSelectionSets    - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPlot             - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferences      - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesDrafting - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesDisplay - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesFiles - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesOpenSave - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesOutput - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesProfiles - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesSelection - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesSystem - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPreferencesUser  - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMenuGroups       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMenuGroup        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadMenuBar          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPopupMenus       - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPopupMenu        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadPopupMenuItem    - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadUtility          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadDocuments        - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadToolbars         - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadToolbar          - Lacks 'CanCreate' flag
// SKIPPING COCLASS: AcadToolbarItem      - Lacks 'CanCreate' flag

// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadAcCmColor
// Help String      : AutoCAD True Color Object
// Default Interface: IAcadAcCmColor
// Def. Intf. Object: IAcadAcCmColorPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadAcCmColor : public Oleserver::TOleServer
{
  IAcadAcCmColorPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadAcCmColor(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadAcCmColorPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadAcCmColorPtr intf);


  void            __fastcall set_EntityColor(long eColor/*[in]*/);
  long            __fastcall get_EntityColor(void);
  BSTR            __fastcall get_ColorName(void);
  BSTR            __fastcall get_BookName(void);
  long            __fastcall get_Red(void);
  long            __fastcall get_Blue(void);
  long            __fastcall get_Green(void);
  void            __fastcall set_ColorMethod(Autocad_tlb::AcColorMethod Flags/*[in]*/);
  Autocad_tlb::AcColorMethod __fastcall get_ColorMethod(void);
  Autocad_tlb::AcColor __fastcall get_ColorIndex(void);
  void            __fastcall set_ColorIndex(Autocad_tlb::AcColor color/*[in]*/);
  void            __fastcall SetNames(BSTR ColorName/*[in]*/, BSTR BookName/*[in]*/);
  void            __fastcall Delete(void);
  void            __fastcall SetRGB(long Red/*[in]*/, long Green/*[in]*/, long Blue/*[in]*/);
  void            __fastcall SetColorBookColor(BSTR BookName/*[in]*/, BSTR ColorName/*[in]*/);
  __property BSTR ColorName={ read=get_ColorName };
  __property BSTR BookName={ read=get_BookName };
  __property long Red={ read=get_Red };
  __property long Blue={ read=get_Blue };
  __property long Green={ read=get_Green };
  __property long EntityColor={ read=get_EntityColor, write=set_EntityColor, stored=false };
  __property Autocad_tlb::AcColorMethod ColorMethod={ read=get_ColorMethod, write=set_ColorMethod, stored=false };
  __property Autocad_tlb::AcColor ColorIndex={ read=get_ColorIndex, write=set_ColorIndex, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadSortentsTable
// Help String      : AutoCAD AcadSortentsTable Object
// Default Interface: IAcadSortentsTable
// Def. Intf. Object: IAcadSortentsTablePtr
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadSortentsTableModified)(System::TObject * Sender, 
                                                                 Autocad_tlb::IAcadObject* pObject/*[in]*/);

class PACKAGE TAcadSortentsTable : public Oleserver::TOleServer
{
  IAcadSortentsTablePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadSortentsTable(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadSortentsTablePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadSortentsTablePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_Handle(void);
  BSTR            __fastcall get_ObjectName(void);
  Autocad_tlb::LONG_PTR __fastcall get_ObjectID(void);
  LPDISPATCH      __fastcall get_Application(void);
  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void);
  VARIANT_BOOL    __fastcall get_HasExtensionDictionary(void);
  Autocad_tlb::LONG_PTR __fastcall get_OwnerID(void);
  LPDISPATCH      __fastcall get_Document(void);
  void            __fastcall GetXData(BSTR AppName/*[in]*/, VARIANT* XDataType/*[out]*/, 
                                      VARIANT* XDataValue/*[out]*/);
  void            __fastcall SetXData(VARIANT XDataType/*[in]*/, VARIANT XDataValue/*[in]*/);
  void            __fastcall Delete(void);
  Autocad_tlb::IAcadDictionary* __fastcall GetExtensionDictionary(void);
  void            __fastcall Erase(void);
  void            __fastcall MoveToBottom(VARIANT Objects/*[in]*/);
  void            __fastcall MoveToTop(VARIANT Objects/*[in]*/);
  void            __fastcall MoveBelow(VARIANT Objects/*[in]*/, 
                                       Autocad_tlb::IAcadEntity* Target/*[in]*/);
  void            __fastcall MoveAbove(VARIANT Objects/*[in]*/, 
                                       Autocad_tlb::IAcadEntity* Target/*[in]*/);
  void            __fastcall SwapOrder(Autocad_tlb::IAcadEntity* Object1/*[in]*/, 
                                       Autocad_tlb::IAcadEntity* Object2/*[in]*/);
  Autocad_tlb::IAcadBlock* __fastcall Block(void);
  void            __fastcall GetFullDrawOrder(VARIANT* Objects/*[out]*/, 
                                              VARIANT_BOOL honorSortentsSysvar/*[in]*/);
  void            __fastcall GetRelativeDrawOrder(VARIANT* Objects/*[out]*/, 
                                                  VARIANT_BOOL honorSortentsSysvar/*[in]*/);
  void            __fastcall SetRelativeDrawOrder(VARIANT Objects/*[in]*/);
  __property BSTR Handle={ read=get_Handle };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Autocad_tlb::LONG_PTR ObjectID={ read=get_ObjectID };
  __property LPDISPATCH Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property VARIANT_BOOL HasExtensionDictionary={ read=get_HasExtensionDictionary };
  __property Autocad_tlb::LONG_PTR OwnerID={ read=get_OwnerID };
  __property LPDISPATCH Document={ read=get_Document };
private:
  TAcadSortentsTableModified     FOnModified;
__published:
  __property TAcadSortentsTableModified OnModified={ read=FOnModified, write=FOnModified };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadTableStyle
// Help String      : AutoCAD AcadTableStyle Object
// Default Interface: IAcadTableStyle
// Def. Intf. Object: IAcadTableStylePtr
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadTableStyleModified)(System::TObject * Sender, 
                                                              Autocad_tlb::IAcadObject* pObject/*[in]*/);

class PACKAGE TAcadTableStyle : public Oleserver::TOleServer
{
  IAcadTableStylePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadTableStyle(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadTableStylePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadTableStylePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_Handle(void);
  BSTR            __fastcall get_ObjectName(void);
  Autocad_tlb::LONG_PTR __fastcall get_ObjectID(void);
  LPDISPATCH      __fastcall get_Application(void);
  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void);
  VARIANT_BOOL    __fastcall get_HasExtensionDictionary(void);
  Autocad_tlb::LONG_PTR __fastcall get_OwnerID(void);
  LPDISPATCH      __fastcall get_Document(void);
  BSTR            __fastcall get_Name(void);
  void            __fastcall set_Name(BSTR bstrValue/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR bstr/*[in]*/);
  long            __fastcall get_BitFlags(void);
  void            __fastcall set_BitFlags(long bitFlag/*[in]*/);
  Autocad_tlb::AcTableDirection __fastcall get_FlowDirection(void);
  void            __fastcall set_FlowDirection(Autocad_tlb::AcTableDirection pFlow/*[in]*/);
  double          __fastcall get_HorzCellMargin(void);
  void            __fastcall set_HorzCellMargin(double dHorzCellMargin/*[in]*/);
  double          __fastcall get_VertCellMargin(void);
  void            __fastcall set_VertCellMargin(double dVertCellMargin/*[in]*/);
  VARIANT_BOOL    __fastcall get_TitleSuppressed(void);
  void            __fastcall set_TitleSuppressed(VARIANT_BOOL bValue/*[in]*/);
  VARIANT_BOOL    __fastcall get_HeaderSuppressed(void);
  void            __fastcall set_HeaderSuppressed(VARIANT_BOOL bValue/*[in]*/);
  void            __fastcall GetXData(BSTR AppName/*[in]*/, VARIANT* XDataType/*[out]*/, 
                                      VARIANT* XDataValue/*[out]*/);
  void            __fastcall SetXData(VARIANT XDataType/*[in]*/, VARIANT XDataValue/*[in]*/);
  void            __fastcall Delete(void);
  Autocad_tlb::IAcadDictionary* __fastcall GetExtensionDictionary(void);
  void            __fastcall Erase(void);
  BSTR            __fastcall GetTextStyle(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetTextStyle(int rowTypes/*[in]*/, BSTR bstrName/*[in]*/);
  double          __fastcall GetTextHeight(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetTextHeight(int rowTypes/*[in]*/, double TextHeight/*[in]*/);
  Autocad_tlb::AcCellAlignment __fastcall GetAlignment(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetAlignment(int rowTypes/*[in]*/, 
                                          Autocad_tlb::AcCellAlignment cellAlignment/*[in]*/);
  Autocad_tlb::IAcadAcCmColor* __fastcall GetColor(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetColor(int rowTypes/*[in]*/, 
                                      Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/);
  Autocad_tlb::IAcadAcCmColor* __fastcall GetBackgroundColor(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetBackgroundColor(int rowTypes/*[in]*/, 
                                                Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/);
  VARIANT_BOOL    __fastcall GetBackgroundColorNone(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetBackgroundColorNone(int rowTypes/*[in]*/, 
                                                    VARIANT_BOOL* bValue/*[in]*/);
  Autocad_tlb::ACAD_LWEIGHT __fastcall GetGridLineWeight(Autocad_tlb::AcGridLineType gridLineType/*[in]*/, 
                                                         Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetGridLineWeight(int gridLineTypes/*[in]*/, int rowTypes/*[in]*/, 
                                               Autocad_tlb::ACAD_LWEIGHT Lineweight/*[in]*/);
  Autocad_tlb::IAcadAcCmColor* __fastcall GetGridColor(Autocad_tlb::AcGridLineType gridLineType/*[in]*/, 
                                                       Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetGridColor(int gridLineTypes/*[in]*/, int rowTypes/*[in]*/, 
                                          Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/);
  VARIANT_BOOL    __fastcall GetGridVisibility(Autocad_tlb::AcGridLineType gridLineType/*[in]*/, 
                                               Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetGridVisibility(int gridLineTypes/*[in]*/, int rowTypes/*[in]*/, 
                                               VARIANT_BOOL bValue/*[in]*/);
  void            __fastcall GetDataType(Autocad_tlb::AcRowType rowType/*[in]*/, 
                                         Autocad_tlb::AcValueDataType* pDataType/*[out]*/, 
                                         Autocad_tlb::AcValueUnitType* pUnitType/*[out]*/);
  void            __fastcall SetDataType(int rowTypes/*[in]*/, 
                                         Autocad_tlb::AcValueDataType nDataType/*[in]*/, 
                                         Autocad_tlb::AcValueUnitType nUnitType/*[in]*/);
  BSTR            __fastcall GetFormat(Autocad_tlb::AcRowType rowType/*[in]*/);
  void            __fastcall SetFormat(int rowTypes/*[in]*/, BSTR val/*[in]*/);
  __property BSTR Handle={ read=get_Handle };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Autocad_tlb::LONG_PTR ObjectID={ read=get_ObjectID };
  __property LPDISPATCH Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property VARIANT_BOOL HasExtensionDictionary={ read=get_HasExtensionDictionary };
  __property Autocad_tlb::LONG_PTR OwnerID={ read=get_OwnerID };
  __property LPDISPATCH Document={ read=get_Document };
  __property BSTR Name={ read=get_Name, write=set_Name, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property long BitFlags={ read=get_BitFlags, write=set_BitFlags, stored=false };
  __property Autocad_tlb::AcTableDirection FlowDirection={ read=get_FlowDirection, write=set_FlowDirection, stored=false };
  __property double HorzCellMargin={ read=get_HorzCellMargin, write=set_HorzCellMargin, stored=false };
  __property double VertCellMargin={ read=get_VertCellMargin, write=set_VertCellMargin, stored=false };
  __property VARIANT_BOOL TitleSuppressed={ read=get_TitleSuppressed, write=set_TitleSuppressed, stored=false };
  __property VARIANT_BOOL HeaderSuppressed={ read=get_HeaderSuppressed, write=set_HeaderSuppressed, stored=false };
private:
  TAcadTableStyleModified        FOnModified;
__published:
  __property TAcadTableStyleModified OnModified={ read=FOnModified, write=FOnModified };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadMLeaderStyle
// Help String      : AutoCAD MLeaderStyle Object
// Default Interface: IAcadMLeaderStyle
// Def. Intf. Object: IAcadMLeaderStylePtr
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadMLeaderStyleModified)(System::TObject * Sender, 
                                                                Autocad_tlb::IAcadObject* pObject/*[in]*/);

class PACKAGE TAcadMLeaderStyle : public Oleserver::TOleServer
{
  IAcadMLeaderStylePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadMLeaderStyle(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadMLeaderStylePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadMLeaderStylePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR            __fastcall get_Handle(void);
  BSTR            __fastcall get_ObjectName(void);
  Autocad_tlb::LONG_PTR __fastcall get_ObjectID(void);
  LPDISPATCH      __fastcall get_Application(void);
  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void);
  VARIANT_BOOL    __fastcall get_HasExtensionDictionary(void);
  Autocad_tlb::LONG_PTR __fastcall get_OwnerID(void);
  LPDISPATCH      __fastcall get_Document(void);
  BSTR            __fastcall get_Name(void);
  void            __fastcall set_Name(BSTR Name/*[in]*/);
  BSTR            __fastcall get_Description(void);
  void            __fastcall set_Description(BSTR Description/*[in]*/);
  long            __fastcall get_BitFlags(void);
  void            __fastcall set_BitFlags(long bitFlag/*[in]*/);
  Autocad_tlb::AcMLeaderContentType __fastcall get_ContentType(void);
  void            __fastcall set_ContentType(Autocad_tlb::AcMLeaderContentType Type/*[in]*/);
  Autocad_tlb::AcDrawMLeaderOrderType __fastcall get_DrawMLeaderOrderType(void);
  void            __fastcall set_DrawMLeaderOrderType(Autocad_tlb::AcDrawMLeaderOrderType Type/*[in]*/);
  Autocad_tlb::AcDrawLeaderOrderType __fastcall get_DrawLeaderOrderType(void);
  void            __fastcall set_DrawLeaderOrderType(Autocad_tlb::AcDrawLeaderOrderType Type/*[in]*/);
  int             __fastcall get_MaxLeaderSegmentsPoints(void);
  void            __fastcall set_MaxLeaderSegmentsPoints(int number/*[in]*/);
  Autocad_tlb::AcSegmentAngleType __fastcall get_FirstSegmentAngleConstraint(void);
  void            __fastcall set_FirstSegmentAngleConstraint(Autocad_tlb::AcSegmentAngleType constraint/*[in]*/);
  Autocad_tlb::AcSegmentAngleType __fastcall get_SecondSegmentAngleConstraint(void);
  void            __fastcall set_SecondSegmentAngleConstraint(Autocad_tlb::AcSegmentAngleType constraint/*[in]*/);
  Autocad_tlb::AcMLeaderType __fastcall get_LeaderLineType(void);
  void            __fastcall set_LeaderLineType(Autocad_tlb::AcMLeaderType Type/*[in]*/);
  Autocad_tlb::IAcadAcCmColorPtr __fastcall get_LeaderLineColor(void);
  void            __fastcall set_LeaderLineColor(Autocad_tlb::IAcadAcCmColorPtr color/*[in]*/);
  Autocad_tlb::ACAD_LTYPE __fastcall get_LeaderLineTypeId(void);
  void            __fastcall set_LeaderLineTypeId(Autocad_tlb::ACAD_LTYPE Type/*[in]*/);
  Autocad_tlb::AcLineWeight __fastcall get_LeaderLineWeight(void);
  void            __fastcall set_LeaderLineWeight(Autocad_tlb::AcLineWeight weight/*[in]*/);
  VARIANT_BOOL    __fastcall get_EnableLanding(void);
  void            __fastcall set_EnableLanding(VARIANT_BOOL enabled/*[in]*/);
  double          __fastcall get_LandingGap(void);
  void            __fastcall set_LandingGap(double LandingGap/*[in]*/);
  VARIANT_BOOL    __fastcall get_EnableDogleg(void);
  void            __fastcall set_EnableDogleg(VARIANT_BOOL enabled/*[in]*/);
  double          __fastcall get_DoglegLength(void);
  void            __fastcall set_DoglegLength(double DoglegLength/*[in]*/);
  BSTR            __fastcall get_ArrowSymbol(void);
  void            __fastcall set_ArrowSymbol(BSTR Name/*[in]*/);
  double          __fastcall get_ArrowSize(void);
  void            __fastcall set_ArrowSize(double size/*[in]*/);
  BSTR            __fastcall get_TextStyle(void);
  void            __fastcall set_TextStyle(BSTR Name/*[in]*/);
  Autocad_tlb::AcTextAttachmentType __fastcall get_TextLeftAttachmentType(void);
  void            __fastcall set_TextLeftAttachmentType(Autocad_tlb::AcTextAttachmentType Type/*[in]*/);
  Autocad_tlb::AcTextAttachmentType __fastcall get_TextRightAttachmentType(void);
  void            __fastcall set_TextRightAttachmentType(Autocad_tlb::AcTextAttachmentType Type/*[in]*/);
  Autocad_tlb::IAcadAcCmColorPtr __fastcall get_TextColor(void);
  void            __fastcall set_TextColor(Autocad_tlb::IAcadAcCmColorPtr color/*[in]*/);
  double          __fastcall get_TextHeight(void);
  void            __fastcall set_TextHeight(double Height/*[in]*/);
  VARIANT_BOOL    __fastcall get_EnableFrameText(void);
  void            __fastcall set_EnableFrameText(VARIANT_BOOL enabled/*[in]*/);
  double          __fastcall get_AlignSpace(void);
  void            __fastcall set_AlignSpace(double AlignSpace/*[in]*/);
  BSTR            __fastcall get_Block(void);
  void            __fastcall set_Block(BSTR Name/*[in]*/);
  Autocad_tlb::IAcadAcCmColorPtr __fastcall get_BlockColor(void);
  void            __fastcall set_BlockColor(Autocad_tlb::IAcadAcCmColorPtr color/*[in]*/);
  VARIANT_BOOL    __fastcall get_EnableBlockScale(void);
  void            __fastcall set_EnableBlockScale(VARIANT_BOOL enabled/*[in]*/);
  double          __fastcall get_BlockScale(void);
  void            __fastcall set_BlockScale(double ScaleFactor/*[in]*/);
  VARIANT_BOOL    __fastcall get_EnableBlockRotation(void);
  void            __fastcall set_EnableBlockRotation(VARIANT_BOOL enabled/*[in]*/);
  double          __fastcall get_BlockRotation(void);
  void            __fastcall set_BlockRotation(double Rotation/*[in]*/);
  Autocad_tlb::AcBlockConnectionType __fastcall get_BlockConnectionType(void);
  void            __fastcall set_BlockConnectionType(Autocad_tlb::AcBlockConnectionType Type/*[in]*/);
  double          __fastcall get_ScaleFactor(void);
  void            __fastcall set_ScaleFactor(double scale/*[in]*/);
  VARIANT_BOOL    __fastcall get_OverwritePropChanged(void);
  VARIANT_BOOL    __fastcall get_Annotative(void);
  void            __fastcall set_Annotative(VARIANT_BOOL Annotative/*[in]*/);
  double          __fastcall get_BreakSize(void);
  void            __fastcall set_BreakSize(double size/*[in]*/);
  BSTR            __fastcall get_TextString(void);
  void            __fastcall set_TextString(BSTR Text/*[in]*/);
  Autocad_tlb::AcTextAngleType __fastcall get_TextAngleType(void);
  void            __fastcall set_TextAngleType(Autocad_tlb::AcTextAngleType Type/*[in]*/);
  Autocad_tlb::AcTextAlignmentType __fastcall get_TextAlignmentType(void);
  void            __fastcall set_TextAlignmentType(Autocad_tlb::AcTextAlignmentType Type/*[in]*/);
  void            __fastcall GetXData(BSTR AppName/*[in]*/, VARIANT* XDataType/*[out]*/, 
                                      VARIANT* XDataValue/*[out]*/);
  void            __fastcall SetXData(VARIANT XDataType/*[in]*/, VARIANT XDataValue/*[in]*/);
  void            __fastcall Delete(void);
  Autocad_tlb::IAcadDictionary* __fastcall GetExtensionDictionary(void);
  void            __fastcall Erase(void);
  __property BSTR Handle={ read=get_Handle };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Autocad_tlb::LONG_PTR ObjectID={ read=get_ObjectID };
  __property LPDISPATCH Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property VARIANT_BOOL HasExtensionDictionary={ read=get_HasExtensionDictionary };
  __property Autocad_tlb::LONG_PTR OwnerID={ read=get_OwnerID };
  __property LPDISPATCH Document={ read=get_Document };
  __property VARIANT_BOOL OverwritePropChanged={ read=get_OverwritePropChanged };
  __property BSTR Name={ read=get_Name, write=set_Name, stored=false };
  __property BSTR Description={ read=get_Description, write=set_Description, stored=false };
  __property long BitFlags={ read=get_BitFlags, write=set_BitFlags, stored=false };
  __property Autocad_tlb::AcMLeaderContentType ContentType={ read=get_ContentType, write=set_ContentType, stored=false };
  __property Autocad_tlb::AcDrawMLeaderOrderType DrawMLeaderOrderType={ read=get_DrawMLeaderOrderType, write=set_DrawMLeaderOrderType, stored=false };
  __property Autocad_tlb::AcDrawLeaderOrderType DrawLeaderOrderType={ read=get_DrawLeaderOrderType, write=set_DrawLeaderOrderType, stored=false };
  __property int MaxLeaderSegmentsPoints={ read=get_MaxLeaderSegmentsPoints, write=set_MaxLeaderSegmentsPoints, stored=false };
  __property Autocad_tlb::AcSegmentAngleType FirstSegmentAngleConstraint={ read=get_FirstSegmentAngleConstraint, write=set_FirstSegmentAngleConstraint, stored=false };
  __property Autocad_tlb::AcSegmentAngleType SecondSegmentAngleConstraint={ read=get_SecondSegmentAngleConstraint, write=set_SecondSegmentAngleConstraint, stored=false };
  __property Autocad_tlb::AcMLeaderType LeaderLineType={ read=get_LeaderLineType, write=set_LeaderLineType, stored=false };
  __property Autocad_tlb::IAcadAcCmColorPtr LeaderLineColor={ read=get_LeaderLineColor, write=set_LeaderLineColor, stored=false };
  __property Autocad_tlb::ACAD_LTYPE LeaderLineTypeId={ read=get_LeaderLineTypeId, write=set_LeaderLineTypeId, stored=false };
  __property Autocad_tlb::AcLineWeight LeaderLineWeight={ read=get_LeaderLineWeight, write=set_LeaderLineWeight, stored=false };
  __property VARIANT_BOOL EnableLanding={ read=get_EnableLanding, write=set_EnableLanding, stored=false };
  __property double LandingGap={ read=get_LandingGap, write=set_LandingGap, stored=false };
  __property VARIANT_BOOL EnableDogleg={ read=get_EnableDogleg, write=set_EnableDogleg, stored=false };
  __property double DoglegLength={ read=get_DoglegLength, write=set_DoglegLength, stored=false };
  __property BSTR ArrowSymbol={ read=get_ArrowSymbol, write=set_ArrowSymbol, stored=false };
  __property double ArrowSize={ read=get_ArrowSize, write=set_ArrowSize, stored=false };
  __property BSTR TextStyle={ read=get_TextStyle, write=set_TextStyle, stored=false };
  __property Autocad_tlb::AcTextAttachmentType TextLeftAttachmentType={ read=get_TextLeftAttachmentType, write=set_TextLeftAttachmentType, stored=false };
  __property Autocad_tlb::AcTextAttachmentType TextRightAttachmentType={ read=get_TextRightAttachmentType, write=set_TextRightAttachmentType, stored=false };
  __property Autocad_tlb::IAcadAcCmColorPtr TextColor={ read=get_TextColor, write=set_TextColor, stored=false };
  __property double TextHeight={ read=get_TextHeight, write=set_TextHeight, stored=false };
  __property VARIANT_BOOL EnableFrameText={ read=get_EnableFrameText, write=set_EnableFrameText, stored=false };
  __property double AlignSpace={ read=get_AlignSpace, write=set_AlignSpace, stored=false };
  __property BSTR Block={ read=get_Block, write=set_Block, stored=false };
  __property Autocad_tlb::IAcadAcCmColorPtr BlockColor={ read=get_BlockColor, write=set_BlockColor, stored=false };
  __property VARIANT_BOOL EnableBlockScale={ read=get_EnableBlockScale, write=set_EnableBlockScale, stored=false };
  __property double BlockScale={ read=get_BlockScale, write=set_BlockScale, stored=false };
  __property VARIANT_BOOL EnableBlockRotation={ read=get_EnableBlockRotation, write=set_EnableBlockRotation, stored=false };
  __property double BlockRotation={ read=get_BlockRotation, write=set_BlockRotation, stored=false };
  __property Autocad_tlb::AcBlockConnectionType BlockConnectionType={ read=get_BlockConnectionType, write=set_BlockConnectionType, stored=false };
  __property double ScaleFactor={ read=get_ScaleFactor, write=set_ScaleFactor, stored=false };
  __property VARIANT_BOOL Annotative={ read=get_Annotative, write=set_Annotative, stored=false };
  __property double BreakSize={ read=get_BreakSize, write=set_BreakSize, stored=false };
  __property BSTR TextString={ read=get_TextString, write=set_TextString, stored=false };
  __property Autocad_tlb::AcTextAngleType TextAngleType={ read=get_TextAngleType, write=set_TextAngleType, stored=false };
  __property Autocad_tlb::AcTextAlignmentType TextAlignmentType={ read=get_TextAlignmentType, write=set_TextAlignmentType, stored=false };
private:
  TAcadMLeaderStyleModified      FOnModified;
__published:
  __property TAcadMLeaderStyleModified OnModified={ read=FOnModified, write=FOnModified };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadDatabase
// Help String      : The contents of an XRef block
// Default Interface: IAcadDatabase
// Def. Intf. Object: IAcadDatabasePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadDatabase : public Oleserver::TOleServer
{
  IAcadDatabasePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadDatabase(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadDatabasePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadDatabasePtr intf);


  Autocad_tlb::IAcadModelSpacePtr __fastcall get_ModelSpace(void);
  Autocad_tlb::IAcadPaperSpacePtr __fastcall get_PaperSpace(void);
  Autocad_tlb::IAcadBlocksPtr __fastcall get_Blocks(void);
  Autocad_tlb::IAcadGroupsPtr __fastcall get_Groups(void);
  Autocad_tlb::IAcadDimStylesPtr __fastcall get_DimStyles(void);
  Autocad_tlb::IAcadLayersPtr __fastcall get_Layers(void);
  Autocad_tlb::IAcadLineTypesPtr __fastcall get_Linetypes(void);
  Autocad_tlb::IAcadDictionariesPtr __fastcall get_Dictionaries(void);
  Autocad_tlb::IAcadRegisteredApplicationsPtr __fastcall get_RegisteredApplications(void);
  Autocad_tlb::IAcadTextStylesPtr __fastcall get_TextStyles(void);
  Autocad_tlb::IAcadUCSsPtr __fastcall get_UserCoordinateSystems(void);
  Autocad_tlb::IAcadViewsPtr __fastcall get_Views(void);
  Autocad_tlb::IAcadViewportsPtr __fastcall get_Viewports(void);
  double          __fastcall get_ElevationModelSpace(void);
  void            __fastcall set_ElevationModelSpace(double Elevation/*[in]*/);
  double          __fastcall get_ElevationPaperSpace(void);
  void            __fastcall set_ElevationPaperSpace(double Elevation/*[in]*/);
  VARIANT         __fastcall get_Limits(void);
  void            __fastcall set_Limits(VARIANT Limits/*[in]*/);
  Autocad_tlb::IAcadLayoutsPtr __fastcall get_Layouts(void);
  Autocad_tlb::IAcadPlotConfigurationsPtr __fastcall get_PlotConfigurations(void);
  Autocad_tlb::IAcadDatabasePreferencesPtr __fastcall get_Preferences(void);
  Autocad_tlb::IAcadFileDependenciesPtr __fastcall get_FileDependencies(void);
  Autocad_tlb::IAcadSummaryInfoPtr __fastcall get_SummaryInfo(void);
  Autocad_tlb::IAcadSectionManagerPtr __fastcall get_SectionManager(void);
  Autocad_tlb::IAcadMaterialsPtr __fastcall get_Materials(void);
  VARIANT         __fastcall CopyObjects(VARIANT Objects/*[in]*/, 
                                         VARIANT Owner/*[in,opt]*/= TNoParam(), 
                                         VARIANT* IdPairs/*[in,out,opt]*/= TNoParam());
  LPDISPATCH      __fastcall HandleToObject(BSTR Handle/*[in]*/);
  LPDISPATCH      __fastcall ObjectIdToObject(Autocad_tlb::LONG_PTR ObjectID/*[in]*/);
  __property Autocad_tlb::IAcadModelSpacePtr ModelSpace={ read=get_ModelSpace };
  __property Autocad_tlb::IAcadPaperSpacePtr PaperSpace={ read=get_PaperSpace };
  __property Autocad_tlb::IAcadBlocksPtr Blocks={ read=get_Blocks };
  __property Autocad_tlb::IAcadGroupsPtr Groups={ read=get_Groups };
  __property Autocad_tlb::IAcadDimStylesPtr DimStyles={ read=get_DimStyles };
  __property Autocad_tlb::IAcadLayersPtr Layers={ read=get_Layers };
  __property Autocad_tlb::IAcadLineTypesPtr Linetypes={ read=get_Linetypes };
  __property Autocad_tlb::IAcadDictionariesPtr Dictionaries={ read=get_Dictionaries };
  __property Autocad_tlb::IAcadRegisteredApplicationsPtr RegisteredApplications={ read=get_RegisteredApplications };
  __property Autocad_tlb::IAcadTextStylesPtr TextStyles={ read=get_TextStyles };
  __property Autocad_tlb::IAcadUCSsPtr UserCoordinateSystems={ read=get_UserCoordinateSystems };
  __property Autocad_tlb::IAcadViewsPtr Views={ read=get_Views };
  __property Autocad_tlb::IAcadViewportsPtr Viewports={ read=get_Viewports };
  __property VARIANT Limits={ read=get_Limits, write=set_Limits };
  __property Autocad_tlb::IAcadLayoutsPtr Layouts={ read=get_Layouts };
  __property Autocad_tlb::IAcadPlotConfigurationsPtr PlotConfigurations={ read=get_PlotConfigurations };
  __property Autocad_tlb::IAcadDatabasePreferencesPtr Preferences={ read=get_Preferences };
  __property Autocad_tlb::IAcadFileDependenciesPtr FileDependencies={ read=get_FileDependencies };
  __property Autocad_tlb::IAcadSummaryInfoPtr SummaryInfo={ read=get_SummaryInfo };
  __property Autocad_tlb::IAcadSectionManagerPtr SectionManager={ read=get_SectionManager };
  __property Autocad_tlb::IAcadMaterialsPtr Materials={ read=get_Materials };
  __property double ElevationModelSpace={ read=get_ElevationModelSpace, write=set_ElevationModelSpace, stored=false };
  __property double ElevationPaperSpace={ read=get_ElevationPaperSpace, write=set_ElevationPaperSpace, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadSecurityParams
// Help String      : Security Parameters Object
// Default Interface: IAcadSecurityParams
// Def. Intf. Object: IAcadSecurityParamsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadSecurityParams : public Oleserver::TOleServer
{
  IAcadSecurityParamsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadSecurityParams(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadSecurityParamsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadSecurityParamsPtr intf);


  void            __fastcall set_Action(long pOperations/*[in]*/);
  long            __fastcall get_Action(void);
  void            __fastcall set_Password(BSTR pSecret/*[in]*/);
  BSTR            __fastcall get_Password(void);
  void            __fastcall set_ProviderType(long pProvType/*[in]*/);
  long            __fastcall get_ProviderType(void);
  void            __fastcall set_ProviderName(BSTR pProvName/*[in]*/);
  BSTR            __fastcall get_ProviderName(void);
  void            __fastcall set_Algorithm(long pAlgId/*[in]*/);
  long            __fastcall get_Algorithm(void);
  void            __fastcall set_KeyLength(long pKeyLen/*[in]*/);
  long            __fastcall get_KeyLength(void);
  void            __fastcall set_Subject(BSTR pCertSubject/*[in]*/);
  BSTR            __fastcall get_Subject(void);
  void            __fastcall set_Issuer(BSTR pCertIssuer/*[in]*/);
  BSTR            __fastcall get_Issuer(void);
  void            __fastcall set_SerialNumber(BSTR pSerialNum/*[in]*/);
  BSTR            __fastcall get_SerialNumber(void);
  void            __fastcall set_Comment(BSTR pText/*[in]*/);
  BSTR            __fastcall get_Comment(void);
  void            __fastcall set_TimeServer(BSTR pTimeServerName/*[in]*/);
  BSTR            __fastcall get_TimeServer(void);
  __property long Action={ read=get_Action, write=set_Action, stored=false };
  __property BSTR Password={ read=get_Password, write=set_Password, stored=false };
  __property long ProviderType={ read=get_ProviderType, write=set_ProviderType, stored=false };
  __property BSTR ProviderName={ read=get_ProviderName, write=set_ProviderName, stored=false };
  __property long Algorithm={ read=get_Algorithm, write=set_Algorithm, stored=false };
  __property long KeyLength={ read=get_KeyLength, write=set_KeyLength, stored=false };
  __property BSTR Subject={ read=get_Subject, write=set_Subject, stored=false };
  __property BSTR Issuer={ read=get_Issuer, write=set_Issuer, stored=false };
  __property BSTR SerialNumber={ read=get_SerialNumber, write=set_SerialNumber, stored=false };
  __property BSTR Comment={ read=get_Comment, write=set_Comment, stored=false };
  __property BSTR TimeServer={ read=get_TimeServer, write=set_TimeServer, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadLayerStateManager
// Help String      : AcadLayerStateManager Class
// Default Interface: IAcadLayerStateManager
// Def. Intf. Object: IAcadLayerStateManagerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadLayerStateManager : public Oleserver::TOleServer
{
  IAcadLayerStateManagerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadLayerStateManager(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadLayerStateManagerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadLayerStateManagerPtr intf);


  void            __fastcall set_Mask(BSTR bsName/*[in]*/, 
                                      Autocad_tlb::AcLayerStateMask eMask/*[in]*/);
  Autocad_tlb::AcLayerStateMask __fastcall get_Mask(BSTR bsName/*[in]*/);
  void            __fastcall SetDatabase(Autocad_tlb::IAcadDatabase* iHostDb/*[in]*/);
  void            __fastcall Save(BSTR bsName/*[in]*/, Autocad_tlb::AcLayerStateMask eMask/*[in]*/);
  void            __fastcall Restore(BSTR bsName/*[in]*/);
  void            __fastcall Delete(BSTR bsName/*[in]*/);
  void            __fastcall Rename(BSTR bsName/*[in]*/, BSTR bsNewName/*[in]*/);
  void            __fastcall Import(BSTR bsFilename/*[in]*/);
  void            __fastcall Export(BSTR bsName/*[in]*/, BSTR bsFilename/*[in]*/);
  __property Autocad_tlb::AcLayerStateMask Mask[BSTR bsName]={ read=get_Mask, write=set_Mask };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadDocument
// Help String      : An AutoCAD drawing
// Default Interface: IAcadDocument
// Def. Intf. Object: IAcadDocumentPtr
// Def. Intf. DISP? : No
// Event   Interface: _DAcadDocumentEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadDocumentBeginSave)(System::TObject * Sender, 
                                                             BSTR FileName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentEndSave)(System::TObject * Sender, 
                                                           BSTR FileName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginCommand)(System::TObject * Sender, 
                                                                BSTR CommandName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentEndCommand)(System::TObject * Sender, 
                                                              BSTR CommandName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginLisp)(System::TObject * Sender, 
                                                             BSTR FirstLine/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginRightClick)(System::TObject * Sender, 
                                                                   VARIANT PickPoint/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuDefault)(System::TObject * Sender, 
                                                                            Autocad_tlb::IAcadPopupMenu** ShortcutMenu);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuEdit)(System::TObject * Sender, 
                                                                         Autocad_tlb::IAcadPopupMenu** ShortcutMenu, 
                                                                         Autocad_tlb::IAcadSelectionSet** SelectionSet);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuCommand)(System::TObject * Sender, 
                                                                            Autocad_tlb::IAcadPopupMenu** ShortcutMenu, 
                                                                            BSTR Command/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuGrip)(System::TObject * Sender, 
                                                                         Autocad_tlb::IAcadPopupMenu** ShortcutMenu);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuOsnap)(System::TObject * Sender, 
                                                                          Autocad_tlb::IAcadPopupMenu** ShortcutMenu);
typedef void __fastcall (__closure * TAcadDocumentEndShortcutMenu)(System::TObject * Sender, 
                                                                   Autocad_tlb::IAcadPopupMenu** ShortcutMenu);
typedef void __fastcall (__closure * TAcadDocumentBeginDoubleClick)(System::TObject * Sender, 
                                                                    VARIANT PickPoint/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentObjectAdded)(System::TObject * Sender, 
                                                               LPDISPATCH Object/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentObjectErased)(System::TObject * Sender, 
                                                                long ObjectID/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentObjectModified)(System::TObject * Sender, 
                                                                  LPDISPATCH Object/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginPlot)(System::TObject * Sender, 
                                                             BSTR DrawingName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentEndPlot)(System::TObject * Sender, 
                                                           BSTR DrawingName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentWindowMovedOrResized)(System::TObject * Sender, 
                                                                        long HWNDFrame/*[in]*/, 
                                                                        VARIANT_BOOL bMoved/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentLayoutSwitched)(System::TObject * Sender, 
                                                                  BSTR LayoutName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentWindowChanged)(System::TObject * Sender, 
                                                                 Autocad_tlb::AcWindowState WindowState/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginDocClose)(System::TObject * Sender, 
                                                                 VARIANT_BOOL* Cancel/*[in,out]*/);

class PACKAGE TAcadDocument : public Oleserver::TOleServer
{
  IAcadDocumentPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadDocument(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadDocumentPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadDocumentPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  Autocad_tlb::IAcadModelSpacePtr __fastcall get_ModelSpace(void);
  Autocad_tlb::IAcadPaperSpacePtr __fastcall get_PaperSpace(void);
  Autocad_tlb::IAcadBlocksPtr __fastcall get_Blocks(void);
  Autocad_tlb::IAcadGroupsPtr __fastcall get_Groups(void);
  Autocad_tlb::IAcadDimStylesPtr __fastcall get_DimStyles(void);
  Autocad_tlb::IAcadLayersPtr __fastcall get_Layers(void);
  Autocad_tlb::IAcadLineTypesPtr __fastcall get_Linetypes(void);
  Autocad_tlb::IAcadDictionariesPtr __fastcall get_Dictionaries(void);
  Autocad_tlb::IAcadRegisteredApplicationsPtr __fastcall get_RegisteredApplications(void);
  Autocad_tlb::IAcadTextStylesPtr __fastcall get_TextStyles(void);
  Autocad_tlb::IAcadUCSsPtr __fastcall get_UserCoordinateSystems(void);
  Autocad_tlb::IAcadViewsPtr __fastcall get_Views(void);
  Autocad_tlb::IAcadViewportsPtr __fastcall get_Viewports(void);
  double          __fastcall get_ElevationModelSpace(void);
  void            __fastcall set_ElevationModelSpace(double Elevation/*[in]*/);
  double          __fastcall get_ElevationPaperSpace(void);
  void            __fastcall set_ElevationPaperSpace(double Elevation/*[in]*/);
  VARIANT         __fastcall get_Limits(void);
  void            __fastcall set_Limits(VARIANT Limits/*[in]*/);
  Autocad_tlb::IAcadLayoutsPtr __fastcall get_Layouts(void);
  Autocad_tlb::IAcadPlotConfigurationsPtr __fastcall get_PlotConfigurations(void);
  Autocad_tlb::IAcadDatabasePreferencesPtr __fastcall get_Preferences(void);
  Autocad_tlb::IAcadFileDependenciesPtr __fastcall get_FileDependencies(void);
  Autocad_tlb::IAcadSummaryInfoPtr __fastcall get_SummaryInfo(void);
  Autocad_tlb::IAcadSectionManagerPtr __fastcall get_SectionManager(void);
  Autocad_tlb::IAcadMaterialsPtr __fastcall get_Materials(void);
  Autocad_tlb::IAcadPlotPtr __fastcall get_Plot(void);
  Autocad_tlb::IAcadLayerPtr __fastcall get_ActiveLayer(void);
  void            __fastcall set_ActiveLayer(Autocad_tlb::IAcadLayerPtr pActLayer/*[in]*/);
  Autocad_tlb::IAcadLineTypePtr __fastcall get_ActiveLinetype(void);
  void            __fastcall set_ActiveLinetype(Autocad_tlb::IAcadLineTypePtr pActLinetype/*[in]*/);
  Autocad_tlb::IAcadDimStylePtr __fastcall get_ActiveDimStyle(void);
  void            __fastcall set_ActiveDimStyle(Autocad_tlb::IAcadDimStylePtr pActDimStyle/*[in]*/);
  Autocad_tlb::IAcadTextStylePtr __fastcall get_ActiveTextStyle(void);
  void            __fastcall set_ActiveTextStyle(Autocad_tlb::IAcadTextStylePtr pActTextStyle/*[in]*/);
  Autocad_tlb::IAcadUCSPtr __fastcall get_ActiveUCS(void);
  void            __fastcall set_ActiveUCS(Autocad_tlb::IAcadUCSPtr pActUCS/*[in]*/);
  Autocad_tlb::IAcadViewportPtr __fastcall get_ActiveViewport(void);
  void            __fastcall set_ActiveViewport(Autocad_tlb::IAcadViewportPtr pActView/*[in]*/);
  Autocad_tlb::IAcadPViewportPtr __fastcall get_ActivePViewport(void);
  void            __fastcall set_ActivePViewport(Autocad_tlb::IAcadPViewportPtr pActView/*[in]*/);
  Autocad_tlb::AcActiveSpace __fastcall get_ActiveSpace(void);
  void            __fastcall set_ActiveSpace(Autocad_tlb::AcActiveSpace ActSpace/*[in]*/);
  Autocad_tlb::IAcadSelectionSetsPtr __fastcall get_SelectionSets(void);
  Autocad_tlb::IAcadSelectionSetPtr __fastcall get_ActiveSelectionSet(void);
  BSTR            __fastcall get_FullName(void);
  BSTR            __fastcall get_Name(void);
  BSTR            __fastcall get_Path(void);
  VARIANT_BOOL    __fastcall get_ObjectSnapMode(void);
  void            __fastcall set_ObjectSnapMode(VARIANT_BOOL fSnapMode/*[in]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  VARIANT_BOOL    __fastcall get_Saved(void);
  VARIANT_BOOL    __fastcall get_MSpace(void);
  void            __fastcall set_MSpace(VARIANT_BOOL Mode/*[in]*/);
  Autocad_tlb::IAcadUtilityPtr __fastcall get_Utility(void);
  Autocad_tlb::IAcadSelectionSetPtr __fastcall get_PickfirstSelectionSet(void);
  VARIANT_BOOL    __fastcall get_Active(void);
  void            __fastcall set_WindowState(Autocad_tlb::AcWindowState pWinState/*[in]*/);
  Autocad_tlb::AcWindowState __fastcall get_WindowState(void);
  void            __fastcall set_Width(int pWidth/*[in]*/);
  int             __fastcall get_Width(void);
  void            __fastcall set_Height(int pHeight/*[in]*/);
  int             __fastcall get_Height(void);
  void            __fastcall set_ActiveLayout(Autocad_tlb::IAcadLayoutPtr pLayout/*[in]*/);
  Autocad_tlb::IAcadLayoutPtr __fastcall get_ActiveLayout(void);
  Autocad_tlb::LONG_PTR __fastcall get_HWND(void);
  BSTR            __fastcall get_WindowTitle(void);
  Autocad_tlb::IAcadApplicationPtr __fastcall get_Application(void);
  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void);
  Autocad_tlb::IAcadMaterialPtr __fastcall get_ActiveMaterial(void);
  void            __fastcall set_ActiveMaterial(Autocad_tlb::IAcadMaterialPtr pActMaterial/*[in]*/);
  VARIANT         __fastcall CopyObjects(VARIANT Objects/*[in]*/, 
                                         VARIANT Owner/*[in,opt]*/= TNoParam(), 
                                         VARIANT* IdPairs/*[in,out,opt]*/= TNoParam());
  LPDISPATCH      __fastcall HandleToObject(BSTR Handle/*[in]*/);
  LPDISPATCH      __fastcall ObjectIdToObject(Autocad_tlb::LONG_PTR ObjectID/*[in]*/);
  Autocad_tlb::IAcadDocument* __fastcall Open(BSTR FullName/*[in]*/, 
                                              VARIANT Password/*[in,opt]*/= TNoParam());
  void            __fastcall AuditInfo(VARIANT_BOOL FixErr/*[in]*/);
  LPDISPATCH      __fastcall Import(BSTR FileName/*[in]*/, VARIANT InsertionPoint/*[in]*/, 
                                    double ScaleFactor/*[in]*/);
  void            __fastcall Export(BSTR FileName/*[in]*/, BSTR Extension/*[in]*/, 
                                    Autocad_tlb::IAcadSelectionSet* SelectionSet/*[in]*/);
  Autocad_tlb::IAcadDocument* __fastcall New(BSTR TemplateFileName/*[in]*/);
  void            __fastcall Save(void);
  void            __fastcall SaveAs(BSTR FullFileName/*[in]*/, 
                                    VARIANT SaveAsType/*[in,opt]*/= TNoParam(), 
                                    VARIANT vSecurityParams/*[in,opt]*/= TNoParam());
  void            __fastcall Wblock(BSTR FileName/*[in]*/, 
                                    Autocad_tlb::IAcadSelectionSet* SelectionSet/*[in]*/);
  void            __fastcall PurgeAll(void);
  VARIANT         __fastcall GetVariable(BSTR Name/*[in]*/);
  void            __fastcall SetVariable(BSTR Name/*[in]*/, VARIANT Value/*[in]*/);
  void            __fastcall LoadShapeFile(BSTR FullName/*[in]*/);
  void            __fastcall Regen(Autocad_tlb::AcRegenType WhichViewports/*[in]*/);
  void            __fastcall Activate(void);
  void            __fastcall Close(VARIANT SaveChanges/*[in,opt]*/= TNoParam(), 
                                   VARIANT FileName/*[in,opt]*/= TNoParam());
  void            __fastcall SendCommand(BSTR Command/*[in]*/);
  void            __fastcall StartUndoMark(void);
  void            __fastcall EndUndoMark(void);
  __property Autocad_tlb::IAcadModelSpacePtr ModelSpace={ read=get_ModelSpace };
  __property Autocad_tlb::IAcadPaperSpacePtr PaperSpace={ read=get_PaperSpace };
  __property Autocad_tlb::IAcadBlocksPtr Blocks={ read=get_Blocks };
  __property Autocad_tlb::IAcadGroupsPtr Groups={ read=get_Groups };
  __property Autocad_tlb::IAcadDimStylesPtr DimStyles={ read=get_DimStyles };
  __property Autocad_tlb::IAcadLayersPtr Layers={ read=get_Layers };
  __property Autocad_tlb::IAcadLineTypesPtr Linetypes={ read=get_Linetypes };
  __property Autocad_tlb::IAcadDictionariesPtr Dictionaries={ read=get_Dictionaries };
  __property Autocad_tlb::IAcadRegisteredApplicationsPtr RegisteredApplications={ read=get_RegisteredApplications };
  __property Autocad_tlb::IAcadTextStylesPtr TextStyles={ read=get_TextStyles };
  __property Autocad_tlb::IAcadUCSsPtr UserCoordinateSystems={ read=get_UserCoordinateSystems };
  __property Autocad_tlb::IAcadViewsPtr Views={ read=get_Views };
  __property Autocad_tlb::IAcadViewportsPtr Viewports={ read=get_Viewports };
  __property VARIANT Limits={ read=get_Limits, write=set_Limits };
  __property Autocad_tlb::IAcadLayoutsPtr Layouts={ read=get_Layouts };
  __property Autocad_tlb::IAcadPlotConfigurationsPtr PlotConfigurations={ read=get_PlotConfigurations };
  __property Autocad_tlb::IAcadDatabasePreferencesPtr Preferences={ read=get_Preferences };
  __property Autocad_tlb::IAcadFileDependenciesPtr FileDependencies={ read=get_FileDependencies };
  __property Autocad_tlb::IAcadSummaryInfoPtr SummaryInfo={ read=get_SummaryInfo };
  __property Autocad_tlb::IAcadSectionManagerPtr SectionManager={ read=get_SectionManager };
  __property Autocad_tlb::IAcadMaterialsPtr Materials={ read=get_Materials };
  __property Autocad_tlb::IAcadPlotPtr Plot={ read=get_Plot };
  __property Autocad_tlb::IAcadSelectionSetsPtr SelectionSets={ read=get_SelectionSets };
  __property Autocad_tlb::IAcadSelectionSetPtr ActiveSelectionSet={ read=get_ActiveSelectionSet };
  __property BSTR FullName={ read=get_FullName };
  __property BSTR Name={ read=get_Name };
  __property BSTR Path={ read=get_Path };
  __property VARIANT_BOOL ReadOnly={ read=get_ReadOnly };
  __property VARIANT_BOOL Saved={ read=get_Saved };
  __property Autocad_tlb::IAcadUtilityPtr Utility={ read=get_Utility };
  __property Autocad_tlb::IAcadSelectionSetPtr PickfirstSelectionSet={ read=get_PickfirstSelectionSet };
  __property VARIANT_BOOL Active={ read=get_Active };
  __property Autocad_tlb::LONG_PTR HWND={ read=get_HWND };
  __property BSTR WindowTitle={ read=get_WindowTitle };
  __property Autocad_tlb::IAcadApplicationPtr Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property double ElevationModelSpace={ read=get_ElevationModelSpace, write=set_ElevationModelSpace, stored=false };
  __property double ElevationPaperSpace={ read=get_ElevationPaperSpace, write=set_ElevationPaperSpace, stored=false };
  __property Autocad_tlb::IAcadLayerPtr ActiveLayer={ read=get_ActiveLayer, write=set_ActiveLayer, stored=false };
  __property Autocad_tlb::IAcadLineTypePtr ActiveLinetype={ read=get_ActiveLinetype, write=set_ActiveLinetype, stored=false };
  __property Autocad_tlb::IAcadDimStylePtr ActiveDimStyle={ read=get_ActiveDimStyle, write=set_ActiveDimStyle, stored=false };
  __property Autocad_tlb::IAcadTextStylePtr ActiveTextStyle={ read=get_ActiveTextStyle, write=set_ActiveTextStyle, stored=false };
  __property Autocad_tlb::IAcadUCSPtr ActiveUCS={ read=get_ActiveUCS, write=set_ActiveUCS, stored=false };
  __property Autocad_tlb::IAcadViewportPtr ActiveViewport={ read=get_ActiveViewport, write=set_ActiveViewport, stored=false };
  __property Autocad_tlb::IAcadPViewportPtr ActivePViewport={ read=get_ActivePViewport, write=set_ActivePViewport, stored=false };
  __property Autocad_tlb::AcActiveSpace ActiveSpace={ read=get_ActiveSpace, write=set_ActiveSpace, stored=false };
  __property VARIANT_BOOL ObjectSnapMode={ read=get_ObjectSnapMode, write=set_ObjectSnapMode, stored=false };
  __property VARIANT_BOOL MSpace={ read=get_MSpace, write=set_MSpace, stored=false };
  __property Autocad_tlb::AcWindowState WindowState={ read=get_WindowState, write=set_WindowState, stored=false };
  __property int Width={ read=get_Width, write=set_Width, stored=false };
  __property int Height={ read=get_Height, write=set_Height, stored=false };
  __property Autocad_tlb::IAcadLayoutPtr ActiveLayout={ read=get_ActiveLayout, write=set_ActiveLayout, stored=false };
  __property Autocad_tlb::IAcadMaterialPtr ActiveMaterial={ read=get_ActiveMaterial, write=set_ActiveMaterial, stored=false };
private:
  TAcadDocumentBeginSave         FOnBeginSave;
  TAcadDocumentEndSave           FOnEndSave;
  TAcadDocumentBeginCommand      FOnBeginCommand;
  TAcadDocumentEndCommand        FOnEndCommand;
  TAcadDocumentBeginLisp         FOnBeginLisp;
  TNotifyEvent                   FOnEndLisp;
  TNotifyEvent                   FOnLispCancelled;
  TNotifyEvent                   FOnSelectionChanged;
  TNotifyEvent                   FOnActivate;
  TNotifyEvent                   FOnDeactivate;
  TAcadDocumentBeginRightClick   FOnBeginRightClick;
  TAcadDocumentBeginShortcutMenuDefault FOnBeginShortcutMenuDefault;
  TAcadDocumentBeginShortcutMenuEdit FOnBeginShortcutMenuEdit;
  TAcadDocumentBeginShortcutMenuCommand FOnBeginShortcutMenuCommand;
  TAcadDocumentBeginShortcutMenuGrip FOnBeginShortcutMenuGrip;
  TAcadDocumentBeginShortcutMenuOsnap FOnBeginShortcutMenuOsnap;
  TAcadDocumentEndShortcutMenu   FOnEndShortcutMenu;
  TAcadDocumentBeginDoubleClick  FOnBeginDoubleClick;
  TAcadDocumentObjectAdded       FOnObjectAdded;
  TAcadDocumentObjectErased      FOnObjectErased;
  TAcadDocumentObjectModified    FOnObjectModified;
  TAcadDocumentBeginPlot         FOnBeginPlot;
  TAcadDocumentEndPlot           FOnEndPlot;
  TAcadDocumentWindowMovedOrResized FOnWindowMovedOrResized;
  TAcadDocumentLayoutSwitched    FOnLayoutSwitched;
  TAcadDocumentWindowChanged     FOnWindowChanged;
  TNotifyEvent                   FOnBeginClose;
  TAcadDocumentBeginDocClose     FOnBeginDocClose;
__published:
  __property TAcadDocumentBeginSave OnBeginSave={ read=FOnBeginSave, write=FOnBeginSave };
  __property TAcadDocumentEndSave OnEndSave={ read=FOnEndSave, write=FOnEndSave };
  __property TAcadDocumentBeginCommand OnBeginCommand={ read=FOnBeginCommand, write=FOnBeginCommand };
  __property TAcadDocumentEndCommand OnEndCommand={ read=FOnEndCommand, write=FOnEndCommand };
  __property TAcadDocumentBeginLisp OnBeginLisp={ read=FOnBeginLisp, write=FOnBeginLisp };
  __property TNotifyEvent OnEndLisp={ read=FOnEndLisp, write=FOnEndLisp };
  __property TNotifyEvent OnLispCancelled={ read=FOnLispCancelled, write=FOnLispCancelled };
  __property TNotifyEvent OnSelectionChanged={ read=FOnSelectionChanged, write=FOnSelectionChanged };
  __property TNotifyEvent OnActivate={ read=FOnActivate, write=FOnActivate };
  __property TNotifyEvent OnDeactivate={ read=FOnDeactivate, write=FOnDeactivate };
  __property TAcadDocumentBeginRightClick OnBeginRightClick={ read=FOnBeginRightClick, write=FOnBeginRightClick };
public:
  __property TAcadDocumentBeginShortcutMenuDefault OnBeginShortcutMenuDefault={ read=FOnBeginShortcutMenuDefault, write=FOnBeginShortcutMenuDefault };
__published:
public:
  __property TAcadDocumentBeginShortcutMenuEdit OnBeginShortcutMenuEdit={ read=FOnBeginShortcutMenuEdit, write=FOnBeginShortcutMenuEdit };
__published:
public:
  __property TAcadDocumentBeginShortcutMenuCommand OnBeginShortcutMenuCommand={ read=FOnBeginShortcutMenuCommand, write=FOnBeginShortcutMenuCommand };
__published:
public:
  __property TAcadDocumentBeginShortcutMenuGrip OnBeginShortcutMenuGrip={ read=FOnBeginShortcutMenuGrip, write=FOnBeginShortcutMenuGrip };
__published:
public:
  __property TAcadDocumentBeginShortcutMenuOsnap OnBeginShortcutMenuOsnap={ read=FOnBeginShortcutMenuOsnap, write=FOnBeginShortcutMenuOsnap };
__published:
public:
  __property TAcadDocumentEndShortcutMenu OnEndShortcutMenu={ read=FOnEndShortcutMenu, write=FOnEndShortcutMenu };
__published:
  __property TAcadDocumentBeginDoubleClick OnBeginDoubleClick={ read=FOnBeginDoubleClick, write=FOnBeginDoubleClick };
  __property TAcadDocumentObjectAdded OnObjectAdded={ read=FOnObjectAdded, write=FOnObjectAdded };
  __property TAcadDocumentObjectErased OnObjectErased={ read=FOnObjectErased, write=FOnObjectErased };
  __property TAcadDocumentObjectModified OnObjectModified={ read=FOnObjectModified, write=FOnObjectModified };
  __property TAcadDocumentBeginPlot OnBeginPlot={ read=FOnBeginPlot, write=FOnBeginPlot };
  __property TAcadDocumentEndPlot OnEndPlot={ read=FOnEndPlot, write=FOnEndPlot };
  __property TAcadDocumentWindowMovedOrResized OnWindowMovedOrResized={ read=FOnWindowMovedOrResized, write=FOnWindowMovedOrResized };
  __property TAcadDocumentLayoutSwitched OnLayoutSwitched={ read=FOnLayoutSwitched, write=FOnLayoutSwitched };
  __property TAcadDocumentWindowChanged OnWindowChanged={ read=FOnWindowChanged, write=FOnWindowChanged };
  __property TNotifyEvent OnBeginClose={ read=FOnBeginClose, write=FOnBeginClose };
  __property TAcadDocumentBeginDocClose OnBeginDocClose={ read=FOnBeginDocClose, write=FOnBeginDocClose };
};

};     // namespace Autocad_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Autocad_tlb;
#endif

#pragma option pop

#endif // AutoCAD_OCXH
